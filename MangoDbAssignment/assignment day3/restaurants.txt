mongoimport --db restaurants --collection addresses --file C:\\Sindhu\\MangoDbAssignment\\restaurants.json

1. Write a MongoDB query to display all the documents in the collection restaurants.
db.restaurants.find().pretty()

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
db.restaurants.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty()

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
db.addresses.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty()

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
db.addresses.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0,"address.zipcode":1}).pretty()

5. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.addresses.find({borough:"Bronx"}).limit(5).pretty()

6. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
db.addresses.find({borough:"Bronx"}).pretty()

7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.addresses.find({borough:"Bronx"}).skip(5).limit(5).pretty()

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
 db.addresses.find({grades : { $elemMatch:{"score":{$gt : 90}}}}).pretty()

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.